User
ship.js 

class Ship {
    constructor(length) {
        this.length = length;
        this.numHits = 0;
        this.sunk = false;
        this.alignment = null;
        this.coordinates = [];
    }

    hit() {
        if(!this.sunk) {
            this.numHits++;
            this.isSunk();
        }
    }

    isSunk() {
        if(this.numHits === this.length) {
            this.sunk = true;
        }
    }

    setCoordinates(startPoint, alignment) {
        this.alignment = alignment;
        this.coordinates = [];
        for (let i = 0; i < this.length; i++) {
            if (alignment === 'horizontal') {
                this.coordinates.push([startPoint[0], startPoint[1] + i]);
            } else if (alignment === 'vertical') {
                this.coordinates.push([startPoint[0] + i, startPoint[1]]);
            }
        }
    }
}

module.exports = Ship;

GameBoard.js
const Ship = require('./ship.js')

class GameBoard {
    constructor() {
        // array where the game would take place
        // e - empty, s - ship, h - hit, m - miss
        this.gameBoard = new Array(10);
        for (let i = 0; i < 10; i++) {
            this.gameBoard[i] = new Array(10).fill("e");
        }

        this.boardPieces = [
            new Ship(4),
            new Ship(3), new Ship(3),
            new Ship(2), new Ship(2), new Ship(2),
            new Ship(1), new Ship(1), new Ship(1), new Ship(1)
        ];
    }

    isAdjacentOccupied(row, col) {
        for (let i = Math.max(0, row - 1); i <= Math.min(9, row + 1); i++) {
            for (let j = Math.max(0, col - 1); j <= Math.min(9, col + 1); j++) {
                if (this.gameBoard[i][j] === "s") {
                    return true;
                }
            }
        }

        return false;
    }

    populateShips(ship) {
        ship.coordinates.forEach(([row, col]) => {
            this.gameBoard[row][col] = 's';
        });
    }

    receiveAttack(row, col) {
        if (this.gameBoard[row][col] === 'e') {
            this.gameBoard[row][col] = 'm';
        } else if (this.gameBoard[row][col] === "s") {
            const ship = this.getShip(row, col)
            ship.hit();
            this.gameBoard[row][col] = 'h';
        }
    }

    getShip(row, col) {
        for (let i = 0; i < this.boardPieces.length; i++) {
            for (let j = 0; j < this.boardPieces[i].coordinates.length; j++) {
                if (this.boardPieces[i].coordinates[j][0] === row && this.boardPieces[i].coordinates[j][1] === col) {
                    return this.boardPieces[i];
                }
            }
        }
    }

    areAllShipsSunk() {
        for (let i = 0; i < this.boardPieces.length; i++) {
            if (!this.boardPieces[i].sunk) {
                return false;
            }
        }
        return true;
    }

    populateShipsRandomly() {
        return new Promise((resolve) => {
            this.boardPieces.forEach(ship => {
                let row, col, direction;
                do {
                    row = Math.floor(Math.random() * 10);
                    col = Math.floor(Math.random() * 10);
                    direction = Math.random() < 0.5 ? 'horizontal' : 'vertical';
                } while (!this.canPlaceShip(ship, row, col, direction));

                this.placeShip(ship, row, col, direction);
            });
            resolve();
        });
    }

    canPlaceShip(ship, row, col, direction) {
        if (direction === 'horizontal') {
            if (col + ship.length > 10) return false;
            for (let i = 0; i < ship.length; i++) {
                if (col + i < 10) {
                    if (this.gameBoard[row][col + i] === 's' || this.isAdjacentOccupied(row, col + i)) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
        } else { // vertical
            if (row + ship.length > 10) return false;
            for (let i = 0; i < ship.length; i++) {
                if (row + i < 10) {
                    if (this.gameBoard[row + i][col] === 's' || this.isAdjacentOccupied(row + i, col)) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
        }
        return true;
    }

    placeShip(ship, row, col, direction) {
        for (let i = 0; i < ship.length; i++) {
            if (direction === 'horizontal') {
                ship.coordinates.push([row, col + i]);
                this.gameBoard[row][col + i] = 's';
            } else { // vertical
                ship.coordinates.push([row + i, col]);
                this.gameBoard[row + i][col] = 's';
            }
        }
    }
}

module.exports = GameBoard;

gameLoop.js

const Ship = require('./ship.js')
const GameBoard = require('./gameBoard.js')
import { displayController } from './displayController.js';

const gameLoop = (function () {
    const userBoard = new GameBoard()
    const computerBoard = new GameBoard()
    let currentPlayer = 'user';

    function switchPlayer() {
        currentPlayer = currentPlayer === 'user' ? 'computer' : 'user';
    }

    function startGame() {
        displayController.placeShipModal();
        displayController.placeShipsOnModal();
        computerBoard.populateShipsRandomly();
        playGame()
    }

    function playGame() {
        while (!userBoard.areAllShipsSunk() && !computerBoard.areAllShipsSunk()) {
            displayController.takeTurn()
            switchPlayer();
        }

        if (userBoard.areAllShipsSunk()) {
            console.log('Computer wins!');
        } else {
            console.log('User wins!');
        }
    }


    let usedCoordinates = new Set();

    function computerTurn() {
        let row, col;
        do {
            row = Math.floor(Math.random() * 10);
            col = Math.floor(Math.random() * 10);
        } while (usedCoordinates.has(`${row},${col}`));

        usedCoordinates.add(`${row},${col}`);
        return [row, col];
    }



    return {
        startGame,computerTurn,
        userBoard: userBoard, computerBoard: computerBoard
    }
})();

export { gameLoop };

import "./styles/main.css";
import "./modules/icon.js";
import "./modules/skeleton.js";
import "./modules/gameLoop.js";
import { displayController } from './modules/displayController.js';
import { gameLoop } from './modules/gameLoop.js';

gameLoop.startGame();

index.js